name: Q-MAD Quality Scan

on:
  push:
    branches:
      - main
      - master
  # Allow manual trigger
  workflow_dispatch:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Project Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run Pytest & Coverage
        id: tests
        # 'continue-on-error' allows the workflow to proceed even if tests fail
        # We capture the failure in 'steps.tests.outcome'
        continue-on-error: true 
        run: pytest --cov --cov-report=xml

      # --- NEW SONARSCANNER STEPS ---

      - name: Set up Java 17
        # The generic SonarScanner CLI requires a Java 17 runtime
        if: env.SONAR_TOKEN != ''
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Download and set up SonarScanner
        if: env.SONAR_TOKEN != ''
        env:
          SONAR_SCANNER_VERSION: 5.0.1.3006 # A specific, stable version
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/bin" >> $GITHUB_PATH
          
      - name: Run SonarCloud Scan
        # This one command replaces the begin/build/end steps
        if: env.SONAR_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.host.url="https://sonarcloud.io" \
            -Dsonar.organization="${{ secrets.SONAR_ORGANIZATION }}" \
            -Dsonar.projectKey="${{ secrets.SONAR_PROJECT_KEY }}" \
            -Dsonar.sources="." \
            -Dsonar.exclusions="**/*.xml, .github/**, tests/**" \
            -Dsonar.python.coverage.reportPaths="coverage.xml" \
            -Dsonar.login="$SONAR_TOKEN"

      # --- END OF NEW SONARSCANNER STEPS ---
      
      - name: Wait for SonarCloud Report
        # This step is conditional; only run if SONAR_TOKEN is set
        if: env.SONAR_TOKEN != ''
        run: |
          echo "Waiting for SonarCloud analysis to be available..."
          # Give SonarCloud time to process the report
          sleep 30
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Install Uploader Dependencies
        run: |
          pip install -r .github/scripts/requirements.txt
          
      - name: Run Q-MAD Uploader
        # This is the "magic" step.
        # It runs our script to poll SonarCloud and upload *all* data.
        env:
          PYTEST_RESULT: ${{ steps.tests.outcome == 'success' && 'PASS' || 'FAIL' }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          QMAD_PROJECT_ID: ${{ secrets.QMAD_PROJECT_ID }}
          QMAD_FIREBASE_SERVICE_ACCOUNT: ${{ secrets.QMAD_FIREBASE_SERVICE_ACCOUNT }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
        run: |
          python .github/scripts/qmad_uploader.py

